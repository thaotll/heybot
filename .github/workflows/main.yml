name: Build, Scan & Update Manifests for ArgoCD

on: [push]

env:
  USER: "thaotll"
  IMAGE_NAME: "heybot-with-trivy-output"
  HELM_CHART_PATH: "./helm/heybot"
  HELM_RELEASE_NAME: "heybot"
  K8S_MANIFEST_PATH: "k8s"
  # Directory where CI scans will output results, relative to workspace root
  CI_SCAN_OUTPUT_DIR: "${{ github.workspace }}/ci_scan_output"

jobs:
  build_scan_and_update_manifests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.REPO_ACCESS_TOKEN }}
          fetch-depth: 0

      - name: Get current commit ID
        id: get_commit_id
        run: echo "CURRENT_COMMIT_ID=$(git rev-parse HEAD)" >> $GITHUB_ENV

      - name: Set up Python
        uses: actions/setup-python@v3
        with:
          python-version: '3.11' # Match Dockerfile Python version

      - name: Install Python dependencies for scanning script
        run: pip install -r app/requirements.txt

      - name: Set up Java (Temurin) for OWASP Dependency-Check
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17' # Or a version compatible with the latest dependency-check

      - name: Install Trivy
        run: |
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https gnupg lsb-release
          wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
          echo "deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main" | sudo tee -a /etc/apt/sources.list.d/trivy.list
          sudo apt-get update
          sudo apt-get install -y trivy

      - name: Install OWASP Dependency-Check
        run: |
          DC_VERSION="9.2.0" # Specify a recent version
          wget https://github.com/jeremylong/DependencyCheck/releases/download/v${DC_VERSION}/dependency-check-${DC_VERSION}-release.zip
          unzip dependency-check-${DC_VERSION}-release.zip
          echo "${{ github.workspace }}/dependency-check/bin" >> $GITHUB_PATH

      - name: Create directory for CI scan results
        run: mkdir -p ${{ env.CI_SCAN_OUTPUT_DIR }}

      - name: Run Security Scans (Trivy & OWASP via main.py - output to CI_SCAN_OUTPUT_DIR)
        id: security_scan_ci
        run: |
          echo "Running security scans locally for CI feedback and image baking..."
          
          # Create a temporary app directory structure for main.py to run correctly
          mkdir -p temp_app_for_ci
          cp -r app/* temp_app_for_ci/
          # Create the target analysis directory *within* the structure main.py expects
          mkdir -p temp_app_for_ci/analysis 

          echo "Running python temp_app_for_ci/main.py..."
          # Execute main.py from within temp_app_for_ci so its relative paths work
          # Pass necessary secrets and config.
          (cd temp_app_for_ci && \
            PATH="${{ github.workspace }}/dependency-check/bin:$PATH" \
            CURRENT_COMMIT_ID=${{ env.CURRENT_COMMIT_ID }} \
            DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }} \
            MODEL_HUMOR_PATH=model_humor.txt \
            DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }} \
            python main.py --mode scan --commit-id ${{ env.CURRENT_COMMIT_ID }})
          
          echo "Moving scan results from temp_app_for_ci/analysis to ${{ env.CI_SCAN_OUTPUT_DIR }}"
          # Move the results to CI_SCAN_OUTPUT_DIR
          mv temp_app_for_ci/analysis/* ${{ env.CI_SCAN_OUTPUT_DIR }}/
          rm -rf temp_app_for_ci # Clean up temporary directory

          echo "Scan script finished. Listing contents of ${{ env.CI_SCAN_OUTPUT_DIR }}:"
          ls -lA ${{ env.CI_SCAN_OUTPUT_DIR }}

          LATEST_JSON_PATH="${{ env.CI_SCAN_OUTPUT_DIR }}/latest_summary.json" # MODIFIED
          if [ ! -f "$LATEST_JSON_PATH" ]; then
            echo "::error::Scan result file latest_summary.json not found in ${{ env.CI_SCAN_OUTPUT_DIR }}!" # MODIFIED
            echo "Expected at: $LATEST_JSON_PATH"
            exit 1
          fi
          
          echo "Contents of latest_summary.json:" # MODIFIED
          cat "$LATEST_JSON_PATH"

          # MODIFIED JQ CHECKS to use the top-level 'status' field from latest_summary.json
          if jq -e '.status == "error"' "$LATEST_JSON_PATH"; then
            echo "::warning::Security scan resulted in an overall 'error' status according to latest_summary.json."
          elif jq -e '.status == "warning"' "$LATEST_JSON_PATH"; then
            echo "::warning::Security scan resulted in an overall 'warning' status according to latest_summary.json."
          else
            echo "Security scan completed with an overall 'success' status reported in latest_summary.json."
          fi

      - name: Upload CI scan results (for debugging/archive)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: ci-scan-results-${{ env.CURRENT_COMMIT_ID }}
          path: ${{ env.CI_SCAN_OUTPUT_DIR }}

      - name: Setup Helm
        uses: azure/setup-helm@v3
        with:
          version: 'latest'

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHCR_TOKEN }}

      - name: Build and push Docker image (now includes scan results)
        run: |
          docker build --no-cache \
            --build-arg CURRENT_COMMIT_ID=${{ env.CURRENT_COMMIT_ID }} \
            -t ghcr.io/${{ env.USER }}/${{ env.IMAGE_NAME }}:${{ env.CURRENT_COMMIT_ID }} \
            -t ghcr.io/${{ env.USER }}/${{ env.IMAGE_NAME }}:latest .
          
          docker push ghcr.io/${{ env.USER }}/${{ env.IMAGE_NAME }}:${{ env.CURRENT_COMMIT_ID }}
          docker push ghcr.io/${{ env.USER }}/${{ env.IMAGE_NAME }}:latest

      - name: Update Kubernetes Manifests with Helm
        run: |
          echo "Updating image tag in Helm chart to ${{ env.CURRENT_COMMIT_ID }} for all relevant deployments"
          
          mkdir -p ${{ env.K8S_MANIFEST_PATH }}
          
          echo "Cleaning up previously Helm-generated files in ${{ env.K8S_MANIFEST_PATH }} that are managed by this chart"
          rm -f ${{ env.K8S_MANIFEST_PATH }}/deployment.yaml 
          rm -f ${{ env.K8S_MANIFEST_PATH }}/service.yaml
          rm -f ${{ env.K8S_MANIFEST_PATH }}/serviceaccount.yaml
          rm -f ${{ env.K8S_MANIFEST_PATH }}/_helpers.tpl 
          rm -f ${{ env.K8S_MANIFEST_PATH }}/NOTES.txt    
          rm -rf ${{ env.K8S_MANIFEST_PATH }}/tests       

          helm template ${{ env.HELM_RELEASE_NAME }} ./${{ env.HELM_CHART_PATH }} \
            --set image.tag=${{ env.CURRENT_COMMIT_ID }} \
            --set image.repository=ghcr.io/${{ env.USER }}/${{ env.IMAGE_NAME }} \
            --output-dir ${{ env.K8S_MANIFEST_PATH }}
            
          TEMPLATED_FILES_SOURCE_PATH="${{ env.K8S_MANIFEST_PATH }}/${{ env.HELM_RELEASE_NAME }}/templates"
          ALTERNATIVE_TEMPLATED_FILES_SOURCE_PATH="${{ env.K8S_MANIFEST_PATH }}/${{ env.HELM_RELEASE_NAME }}"

          if [ -d "$TEMPLATED_FILES_SOURCE_PATH" ]; then
            echo "Moving templated files from $TEMPLATED_FILES_SOURCE_PATH to ${{ env.K8S_MANIFEST_PATH }}"
            mv $TEMPLATED_FILES_SOURCE_PATH/* ${{ env.K8S_MANIFEST_PATH }}/
            rm -rf "${{ env.K8S_MANIFEST_PATH }}/${{ env.HELM_RELEASE_NAME }}"
          elif [ -d "$ALTERNATIVE_TEMPLATED_FILES_SOURCE_PATH" ]; then
            echo "Moving templated files from $ALTERNATIVE_TEMPLATED_FILES_SOURCE_PATH to ${{ env.K8S_MANIFEST_PATH }}"
            mv $ALTERNATIVE_TEMPLATED_FILES_SOURCE_PATH/* ${{ env.K8S_MANIFEST_PATH }}/
            rm -rf "${{ env.K8S_MANIFEST_PATH }}/${{ env.HELM_RELEASE_NAME }}"
          else
            echo "Error: Helm output directory not found as expected. Listing content of ${{ env.K8S_MANIFEST_PATH }} for debugging:"
            ls -R ${{ env.K8S_MANIFEST_PATH }}
            exit 1
          fi
          
          echo "Generated manifests in ${{ env.K8S_MANIFEST_PATH }}:"
          ls -R ${{ env.K8S_MANIFEST_PATH }}

      - name: Commit and push manifest changes
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          # Add the new PV and PVC files as well if they are in K8S_MANIFEST_PATH
          # or if they are top-level, adjust path. Assuming they are in k8s/ too.
          git add ${{ env.K8S_MANIFEST_PATH }}/*
          
          if ! git diff --staged --quiet; then
            git commit -m "Update image to ${{ env.IMAGE_NAME }}:${{ env.CURRENT_COMMIT_ID }} via Helm, add PV/PVC [skip ci]"
            git push
          else
            echo "No manifest changes to commit."
          fi