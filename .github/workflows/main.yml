name: Docker Image Scan and Deploy

on: [push]

env:
  USER: "thaotll"
  KUBECONFIG_BASE64: ${{ secrets.KUBECONFIG_BASE64 }}

jobs:
  build_scan_deploy:
    runs-on: ubuntu-latest

    steps:
      # Checkout the code with write permission
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0
        
      # Get current commit ID
      - name: Get current commit ID
        id: get_commit_id
        run: |
          echo "CURRENT_COMMIT_ID=$(git rev-parse HEAD)" >> $GITHUB_ENV

      # Login to GitHub Container Registry
      - name: Login to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}  # Use the GitHub username (actor)
          password: ${{ secrets.GHCR_TOKEN }}  # Use the secret token

      # Build and push the Docker image with current commit ID
      - name: Build and push Docker image
        run: |
          docker build \
            --build-arg CURRENT_COMMIT_ID=${{ env.CURRENT_COMMIT_ID }} \
            -t ghcr.io/$USER/heybot:${{ env.CURRENT_COMMIT_ID }} \
            -t ghcr.io/$USER/heybot:latest .
          
          docker push ghcr.io/$USER/heybot:${{ env.CURRENT_COMMIT_ID }}
          docker push ghcr.io/$USER/heybot:latest

      # Install Trivy
      - name: Install Trivy
        uses: aquasecurity/setup-trivy@v0.2.0
        with:
          version: latest # Specify the desired version


      # Run Trivy scan and security analysis
      - name: Run security analysis
        run: |
          # Create analysis directory
          mkdir -p ./analysis
          
          # Run Trivy scan
          trivy image \
            --severity HIGH,CRITICAL,MEDIUM,LOW \
            --format json \
            --output ./analysis/trivy-${{ env.CURRENT_COMMIT_ID }}.json \
            ghcr.io/$USER/heybot:${{ env.CURRENT_COMMIT_ID }}
          
          # Run security analysis container
          docker run --rm \
            -v $(pwd)/analysis:/app/analysis \
            -e DISCORD_WEBHOOK_URL=${{ secrets.DISCORD_WEBHOOK_URL }} \
            -e MODEL_HUMOR_PATH=/app/humor_template.txt \
            -e MODEL_HUMOR_PATH1=/app/humor_template.txt \
            -e DEEPSEEK_API_KEY=${{ secrets.DEEPSEEK_API_KEY }} \
            -e CURRENT_COMMIT_ID=${{ env.CURRENT_COMMIT_ID }} \
            ghcr.io/$USER/heybot:${{ env.CURRENT_COMMIT_ID }}

      # Set up kubectl for deployment
      - name: Setup kubectl
        run: |
          mkdir -p $HOME/.kube
          echo "${KUBECONFIG_BASE64}" | base64 -d > $HOME/.kube/config
        env:
          KUBECONFIG_BASE64: ${{ secrets.KUBECONFIG_BASE64 }}
      
      # Install kubectl
      - name: Install kubectl
        uses: azure/setup-kubectl@v3
        with:
          version: 'latest'

      # Update Kubernetes deployment and repo files
      - name: Update Kubernetes deployment
        run: |
          # Update deployment YAML files in repo
          sed -i "s/commit-id: \".*\"/commit-id: \"${{ env.CURRENT_COMMIT_ID }}\"/" k8s/deployment.yaml
          sed -i "s|image: ghcr.io/$USER/heybot.*|image: ghcr.io/$USER/heybot:${{ env.CURRENT_COMMIT_ID }}|" k8s/deployment.yaml
          sed -i "s|image: ghcr.io/$USER/heybot-api:.*|image: ghcr.io/$USER/heybot-api:${{ env.CURRENT_COMMIT_ID }}|" k8s/heybot-api-deployment.yaml
          
          # Apply deployments
          kubectl apply -f k8s/deployment.yaml
          kubectl apply -f k8s/heybot-api-deployment.yaml
          
          # Wait for deployments to complete
          kubectl rollout status deployment/heybot-app
          kubectl rollout status deployment/heybot-api
          
          # Commit and push updated files
          git config --global user.name "GitHub Actions Bot"
          git config --global user.email "actions@github.com"
          git add k8s/deployment.yaml k8s/heybot-api-deployment.yaml
          git commit -m "Update deployment to ${{ env.CURRENT_COMMIT_ID }}"
          git push
